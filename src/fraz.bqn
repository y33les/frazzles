curl ← •Import "../lib/bqn-curl/curl.bqn"
read ← •Import "read.bqn"
err ← •Import "err.bqn"
msg ← •Import "msg.bqn"

cmdSet ← ⟨"new","init","add","remove","search","help"⟩ # Allowed commands
cmdHelpMap ← cmdSet •HashMap ⟨msg.help.new,msg.help.init,msg.help.add,msg.help.remove,msg.help.search,msg.help.help⟩ # Allowed commands with their corresponding help messages

# Process arguments: fraz <cmd> <args>
args ← •args
{ 0=≠𝕩 ? •Out msg.help.fraz ⋄ •Exit 0 ; @ }args # Display help message if no arguments provided
cmd ← ⊑args
(∊⟜cmdSet⌾<cmd) err._Assert_ ("Allowed commands are: "∾{𝕨∾", "∾𝕩}´cmdSet) # Fail if cmd is unknown
args 1⊸↓↩

configHeaders ← ⟨"name","description","author","version","type","licence","dependencies"⟩
InputConfig ← {
  •Out "Frazzle name:"
  name ← read.LineNoBlank 𝕩
  •Out "Description:"
  description ← read.LineNoBlank 𝕩
  •Out "Author:"
  author ← read.LineNoBlank 𝕩
  •Out "Version number:"
  version ← read.LineNoBlank 𝕩
  •Out "Frazzle type ('app' or 'lib'):"
  type ← {l←read.LineNoBlank 𝕩 ⋄ (l≡"app")∨(l≡"lib") ? l ; •Out "Frazzle type must be either 'app' or 'lib'." ⋄ 𝕊 𝕩} 𝕩
  •Out "Licence:"
  licence ← read.LineNoBlank 𝕩
  dependencies ← ⟨⟩
  ⟨name,description,author,version,type,licence,dependencies⟩
}
# Generate a config HashMap where 𝕩 is a list of corresponding to the Frazzle name (string), description (string), author (string), version (string), type (string: "app" or "lib") licence (string) and dependencies (list of strings).
# TODO: Implement dependency versioning like in Python (e.g. "numpy==1.1.14")
GenConfig ⇐ {
  n←≠configHeaders
  ("GenConfig requires a list of length "∾(•Fmt n)∾".")!n=≠𝕩
  configHeaders •HashMap 𝕩
}
ReadConfig ⇐ { 𝕩 }
WriteConfig ⇐ { 𝕨 •file.Bytes 𝕩 } # TODO: input checking

New ⇐ {
  (1=≠𝕩) err._Assert_ msg.use.new
  dir ← •wdpath •file.At ⊑𝕩
  (¬•file.Exists dir) err._Assert_ ("Directory "∾dir∾" already exists.")
  •file.CreateDir dir
  frazFile ← dir •file.At ".frazzle"
  frazFile WriteConfig GenConfig InputConfig ""
  •Out "New Frazzle created in "∾dir∾"."
}
Init ⇐ {
  (0=≠𝕩) err._Assert_ "fraz init does not accept arguments.  Did you mean 'fraz new <dir>'?"
  frazFile ← •wdpath •file.At ".frazzle"
  (¬•file.Exists frazFile) err._Assert_ "This directory is already a Frazzle."
  WriteConfig frazFile
  •Out "Frazzle initialised in "∾•wdpath
}
Add ⇐ { •Show⌽𝕩 }
Remove ⇐ { •Show⌽¨𝕩 }
Search ⇐ {
  frazIndex ← "ftp://ftp.frazzl.es"
  (0≠≠𝕩) err._Assert_ msg.use.search
  {"-i"≡⊑𝕩 ? msg.use.search!2=≠𝕩 ⋄ frazIndex ↩ 1⊑𝕩 ; msg.use.search!1=≠𝕩}𝕩
  •Out frazIndex
}
Help ⇐ {
  (2>≠𝕩) err._Assert_ msg.use.help
  { 0=≠𝕩 ? •Out msg.help.fraz ⋄ •Exit 0 ; @ }𝕩 # Display toplevel help message if no command provided
  (∊⟜cmdSet⌾<⊑𝕩) err._Assert_ ("Allowed commands are: "∾{𝕨∾", "∾𝕩}´cmdSet)
  •Out cmdHelpMap.Get ⊑𝕩 
}
cmdFnMap ← cmdSet •HashMap ⟨new,init,add,remove,search,help⟩ # Allowed commands with their corresponding functions

# Run it!
args{𝕏𝕨}cmdFnMap.Get cmd